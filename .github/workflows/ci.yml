name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=app --cov-fail-under=90 --cov-report=xml --cov-report=term-missing -m "not performance"
      env:
        COVERAGE_FILE: cache/.coverage
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run end-to-end tests with performance measurement
      run: |
        poetry run pytest tests/integration/test_end_to_end.py::test_e2e_pytest_qa --verbose
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: "true"
        STRICT_PERFORMANCE: "false"

    - name: Run dedicated performance tests
      run: |
        poetry run pytest tests/integration/test_performance.py --verbose
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: "true"
        STRICT_PERFORMANCE: "false"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cache/coverage.xml
        fail_ci_if_error: false

    - name: Run linting
      run: poetry run ruff check .

    - name: Run formatting check
      run: poetry run ruff format --check .
